[{"path":"https://qhuitan.github.io/ggbulksurv/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://qhuitan.github.io/ggbulksurv/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":"https://qhuitan.github.io/ggbulksurv/articles/customizing-plots.html","id":"brewer-palettes","dir":"Articles","previous_headings":"Color palettes","what":"Brewer palettes","title":"Customizing Plots","text":"RColorBrewer provides list useful, aesthetically pleasing palettes frequently used R. use palettes, change palette parameter:","code":"# Using the Set1 brewer palette p <- run_bulksurv(sample_data,               sample_order = c(\"WT\", \"Drug1\", \"Drug2\"),              print_stats = FALSE,              palette = \"Set1\" # Custom brewer palette              )"},{"path":"https://qhuitan.github.io/ggbulksurv/articles/customizing-plots.html","id":"journal-palettes","dir":"Articles","previous_headings":"Color palettes","what":"Journal palettes","title":"Customizing Plots","text":"ggsci provides collection palettes inspired scientific publishing groups. colors can also used plots:","code":"# Using the nature palette p <- run_bulksurv(sample_data,               sample_order = c(\"WT\", \"Drug1\", \"Drug2\"),              print_stats = FALSE,              palette = \"npg\" # Nature palette              )"},{"path":"https://qhuitan.github.io/ggbulksurv/articles/customizing-plots.html","id":"specific-colors","dir":"Articles","previous_headings":"Color palettes","what":"Specific colors","title":"Customizing Plots","text":"can also specify colors, either name (“black”, “blue”), hexadecimal value (“#80080”):","code":"# Using manual colors p <- run_bulksurv(sample_data, sample_order = c(\"WT\", \"Drug1\", \"Drug2\"),              print_stats = FALSE,              palette = c(\"black\", \"red\", \"#800080\") # Custom colors              )"},{"path":[]},{"path":"https://qhuitan.github.io/ggbulksurv/articles/customizing-plots.html","id":"removing-legend-title","dir":"Articles","previous_headings":"Legends","what":"Removing legend title","title":"Customizing Plots","text":"","code":"p <- run_bulksurv(sample_data, sample_order = c(\"WT\", \"Drug1\", \"Drug2\"),              print_stats = FALSE,              legend.title = \"\" # Remove the legend title              )"},{"path":"https://qhuitan.github.io/ggbulksurv/articles/customizing-plots.html","id":"specifying-legend-position","dir":"Articles","previous_headings":"Legends","what":"Specifying legend position","title":"Customizing Plots","text":"Specifying position (right, left, bottom top) legend.position:","code":"p <- run_bulksurv(sample_data,                    sample_order = c(\"WT\", \"Drug1\", \"Drug2\"),              print_stats = FALSE,              legend.position = \"bottom\")"},{"path":"https://qhuitan.github.io/ggbulksurv/articles/customizing-plots.html","id":"specific-legend-coordinates","dir":"Articles","previous_headings":"Legends","what":"Specific legend coordinates","title":"Customizing Plots","text":"Specific coordinates can also used. bottom left, use legend.position = c(0,0); top right, use legend.position = c(1,1).","code":"p <- run_bulksurv(sample_data,                    sample_order = c(\"WT\", \"Drug1\", \"Drug2\"),                   print_stats = FALSE,                   legend.position = c(0.9, 0.9))"},{"path":[]},{"path":"https://qhuitan.github.io/ggbulksurv/articles/customizing-plots.html","id":"change-the-x-axis-breaks","dir":"Articles","previous_headings":"Axis customizations","what":"Change the x-axis breaks","title":"Customizing Plots","text":"","code":"p <- run_bulksurv(sample_data, sample_order = c(\"WT\", \"Drug1\", \"Drug2\"),              print_stats = FALSE              )"},{"path":[]},{"path":"https://qhuitan.github.io/ggbulksurv/articles/customizing-plots.html","id":"adding-pvalue-and-50-median-survival-line","dir":"Articles","previous_headings":"Annotations","what":"Adding pvalue and 50% median survival line","title":"Customizing Plots","text":"","code":"p <- run_bulksurv(sample_data, sample_order = c(\"WT\", \"Drug1\", \"Drug2\"),              print_stats = FALSE,              add.median.survival = TRUE, # Add median survival              add.pval = TRUE # Add pvalue              )"},{"path":"https://qhuitan.github.io/ggbulksurv/articles/customizing-plots.html","id":"add-confidence-interval","dir":"Articles","previous_headings":"Annotations","what":"Add confidence interval","title":"Customizing Plots","text":"","code":"p <- run_bulksurv(sample_data, sample_order = c(\"WT\", \"Drug1\", \"Drug2\"),              print_stats = FALSE,              add.conf.int = TRUE              )"},{"path":"https://qhuitan.github.io/ggbulksurv/articles/customizing-plots.html","id":"putting-it-all-together","dir":"Articles","previous_headings":"Annotations","what":"Putting it all together","title":"Customizing Plots","text":"","code":"p <- run_bulksurv(sample_data,                    sample_order = c(\"WT\", \"Drug1\", \"Drug2\"),                   print_stats = FALSE,                   add.median.surv = TRUE,                    palette = c(\"black\", \"red\", \"purple\"), # Custom colors                   legend.title = \"\",                     # Remove legend title                   legend.position = c(0.9, 0.9),         # Position legend at top right                   add.pval = TRUE                       # Add pvalue              ) p"},{"path":"https://qhuitan.github.io/ggbulksurv/articles/getting-started-with-r.html","id":"getting-started-with-r","dir":"Articles","previous_headings":"","what":"Getting started with R","title":"getting-started-with-r","text":"vignette complete beginners R. know use R looking customize plots , see vignette(\"customizing-plots\").","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/articles/getting-started-with-r.html","id":"download-r-and-rstudio","dir":"Articles","previous_headings":"Getting started with R","what":"1. Download R and RStudio","title":"getting-started-with-r","text":"Download recent versions R RStudio appropriate OS using links : R RStudio","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/articles/getting-started-with-r.html","id":"create-a-new-r-project","dir":"Articles","previous_headings":"Getting started with R","what":"2. Create a new R Project","title":"getting-started-with-r","text":"Create new folder place can easily find . Put lifespan study csv file . tutorial, file called sample_data.csv. csv file 4 columns: condition, day, dead, censored. example: Open RStudio. Click File -> New Project -> Existing folder. Navigate folder contains lifespan csv file, click “Create”. RStudio now open new window, see lifespan study csv file bottom right Files pane. Create new Quarto markdown file. Click File -> New File -> Quarto Document.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/articles/getting-started-with-r.html","id":"a-quick-guide-to-rstudio","dir":"Articles","previous_headings":"Getting started with R","what":"3. A quick guide to RStudio:","title":"getting-started-with-r","text":"user interface insert image: console, main code, environment, files panel image - Code chunk vs text Quarto documents consist two parts - code chunks vs text chunks. code chunk: text: 1 + 1 ’s difference? Code chunks evaluated - meaning calculations run. example, type =1+1 Excel, Excel automatically sums returns answer, 2. contrast, type =1+1 Microsoft Word, remain text. simple analogy - code chunks Microsoft Excel R, text chunks Microsoft Word R. run code chunks, click tiny green triangle pointing right top right code chunk. Code chunks different colour, delineated ‘```{r}’ header. Everything within code chunk run evaluated. exceptions comments, start #: tldr: code chunks code, text chunks text. Describe analyzing describe conditions testing. help reader, also future self revisit analysis several years road. example, begin describing fictional dataset:","code":"1 + 1 #> [1] 2 # This is a comment: Let's try adding in R 1 + 1  #> [1] 2 # Not run - this will return an error.  This is not a comment: Let's try adding in R  1 + 1 This dataset contains lifespan data from 50 _C.elegans_ worms.  Summary of conditions:   condition | description WT        | 50 N2 worms Drug1     | N2 worms treated with fictional Drug X at 50 μM Drug2     | N2 worms treated with fictional Drug Y at 50 μM"},{"path":"https://qhuitan.github.io/ggbulksurv/articles/getting-started-with-r.html","id":"start-your-analysis","dir":"Articles","previous_headings":"Getting started with R","what":"3. Start your analysis","title":"getting-started-with-r","text":"First, load libraries. Libraries packages contain functions need run. Copy paste chunks code Quarto Document. Next, read csv file:","code":"library(ggbulksurv) df <- read.csv(\"sample_data.csv\")  head(df) # quick preview #>   X condition day dead censored #> 1 1        WT   0    0        0 #> 2 2        WT   1    2        1 #> 3 3        WT   2    1        0 #> 4 4        WT   3    1        0 #> 5 5        WT   4    3        0 #> 6 6        WT   5    1        0"},{"path":"https://qhuitan.github.io/ggbulksurv/articles/getting-started-with-r.html","id":"run-a-default-analysis","dir":"Articles","previous_headings":"Getting started with R","what":"4. Run a default analysis:","title":"getting-started-with-r","text":"’s ! Congrats getting started R. want customize plots, see vignette(\"customizing-plots\") preview cool stuff can :","code":"p <- run_bulksurv(df) #> $median_survival #> Call: survfit(formula = Surv(day, status) ~ condition, data = df_isurv) #>  #>                  n events median 0.95LCL 0.95UCL #> condition=WT    50     47   20.0      19      21 #> condition=Drug1 50     46    4.5       4       6 #> condition=Drug2 50     42   33.0      32      35 #>  #> $logrank #> Call: #> survival::survdiff(formula = Surv(day, status) ~ condition, data = df_isurv) #>  #>                  N Observed Expected (O-E)^2/E (O-E)^2/V #> condition=WT    50       47     31.2      7.94      12.9 #> condition=Drug1 50       46     12.5     89.99     128.1 #> condition=Drug2 50       42     91.3     26.60     123.3 #>  #>  Chisq= 186  on 2 degrees of freedom, p= <2e-16  #>  #> $pairwise #>  #>  Pairwise comparisons using Log-Rank test  #>  #> data:  df_isurv and condition  #>  #>       WT      Drug1   #> Drug1 2.3e-14 -       #> Drug2 < 2e-16 < 2e-16 #>  #> P value adjustment method: BH p p <- run_bulksurv(df,                    sample_order = c(\"WT\", \"Drug1\", \"Drug2\"),                   print_stats = FALSE,                   add.median.surv = TRUE,                    palette = c(\"black\", \"red\", \"purple\"), # Custom colors                   legend.title = \"\",                     # Remove legend title                   legend.position = c(0.9, 0.9),         # Position legend at top right                   add.pval = TRUE                       # Add pvalue              ) p"},{"path":"https://qhuitan.github.io/ggbulksurv/articles/getting-started-with-r.html","id":"converting-to-prism","dir":"Articles","previous_headings":"Getting started with R","what":"5. Converting to PRISM","title":"getting-started-with-r","text":"’re converting PRISM, use command see df_prism.csv file appear folder. Copy paste GraphPad PRISM, run survival analysis PRISM.","code":"df_prism <- pivot_prism(df) write.csv(df_prism, file = \"df_prism.csv\")"},{"path":"https://qhuitan.github.io/ggbulksurv/articles/getting-started-with-r.html","id":"further-reading","dir":"Articles","previous_headings":"Getting started with R","what":"Further reading","title":"getting-started-with-r","text":"’re new R, highly recommend great resource Harvard Chan Bioinformatics Core. provides great overview RStudio interface, well R Projects help keep analysis organized. https://hbctraining.github.io/Intro--R-flipped/lessons/01_introR-R--RStudio.html","code":"sessionInfo() #> R version 4.3.2 (2023-10-31) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggbulksurv_0.2.1 #>  #> loaded via a namespace (and not attached): #>  [1] gtable_0.3.4      xfun_0.41         bslib_0.5.1       ggplot2_3.4.4     #>  [5] rstatix_0.7.2     lattice_0.21-9    vctrs_0.6.4       tools_4.3.2       #>  [9] generics_0.1.3    tibble_3.2.1      fansi_1.0.5       highr_0.10        #> [13] pkgconfig_2.0.3   Matrix_1.6-1.1    data.table_1.14.8 desc_1.4.2        #> [17] lifecycle_1.0.4   farver_2.1.1      compiler_4.3.2    stringr_1.5.1     #> [21] textshaping_0.3.7 munsell_0.5.0     janitor_2.2.0     carData_3.0-5     #> [25] snakecase_0.11.1  htmltools_0.5.7   sass_0.4.7        yaml_2.3.7        #> [29] pillar_1.9.0      pkgdown_2.0.7     car_3.1-2         ggpubr_0.6.0      #> [33] jquerylib_0.1.4   tidyr_1.3.0       cachem_1.0.8      survminer_0.4.9   #> [37] abind_1.4-5       km.ci_0.5-6       tidyselect_1.2.0  digest_0.6.33     #> [41] stringi_1.8.1     dplyr_1.1.4       purrr_1.0.2       labeling_0.4.3    #> [45] splines_4.3.2     rprojroot_2.0.4   fastmap_1.1.1     grid_4.3.2        #> [49] colorspace_2.1-0  cli_3.6.1         magrittr_2.0.3    survival_3.5-7    #> [53] utf8_1.2.4        broom_1.0.5       withr_2.5.2       scales_1.2.1      #> [57] backports_1.4.1   lubridate_1.9.3   timechange_0.2.0  rmarkdown_2.25    #> [61] gridExtra_2.3     ggsignif_0.6.4    zoo_1.8-12        ragg_1.2.6        #> [65] memoise_2.0.1     evaluate_0.23     knitr_1.45        KMsurv_0.1-5      #> [69] survMisc_0.5.6    rlang_1.1.2       Rcpp_1.0.11       xtable_1.8-4      #> [73] glue_1.6.2        jsonlite_1.8.7    R6_2.5.1          plyr_1.8.9        #> [77] systemfonts_1.0.5 fs_1.6.3"},{"path":[]},{"path":"https://qhuitan.github.io/ggbulksurv/articles/ggbulksurv.html","id":"load-libraries","dir":"Articles","previous_headings":"Setup","what":"Load libraries","title":"Quick Start","text":"","code":"library(ggbulksurv)"},{"path":"https://qhuitan.github.io/ggbulksurv/articles/ggbulksurv.html","id":"read-in-the-csv-file","dir":"Articles","previous_headings":"Setup","what":"Read in the csv file","title":"Quick Start","text":"’re using Excel, 4 columns data look like : Export Excel table csv file. Create R project folder csv file, use following line code import csv file R. illustrate functions available package, ’ve created small fictional dataset. like follow tutorial sample dataset, load code: Let’s take quick look dat: expected, dat 4 columns: condition, day, dead, censored. conditions present?","code":"dat <- read.csv(\"your-csv-file.csv\") # Load sample_data (the fictional dataset) data(sample_data)  # Save this as variable dat so it's easier for us to call it dat <- sample_data head(dat) #>   condition day dead censored #> 1        WT   0    0        0 #> 2        WT   1    2        1 #> 3        WT   2    1        0 #> 4        WT   3    1        0 #> 5        WT   4    3        0 #> 6        WT   5    1        0 unique(dat$condition) #> [1] \"WT\"    \"Drug1\" \"Drug2\""},{"path":[]},{"path":"https://qhuitan.github.io/ggbulksurv/articles/ggbulksurv.html","id":"default-analysis","dir":"Articles","previous_headings":"run_bulksurv","what":"Default analysis","title":"Quick Start","text":"run default analysis using run_bulksurv function:  plot dimensions don’t look great. fix , specify dimensions (fig.height = 4, fig.width = 6)  Note run_bulksurv returns plot ggplot object, can customize required:","code":"p <- run_bulksurv(dat,                    sample_order = c(\"WT\", \"Drug1\", \"Drug2\"),                    type = \"survival\") #> $median_survival #> Call: survfit(formula = Surv(day, status) ~ condition, data = df_isurv) #>  #>                  n events median 0.95LCL 0.95UCL #> condition=WT    50     47   20.0      19      21 #> condition=Drug1 50     46    4.5       4       6 #> condition=Drug2 50     42   33.0      32      35 #>  #> $logrank #> Call: #> survival::survdiff(formula = Surv(day, status) ~ condition, data = df_isurv) #>  #>                  N Observed Expected (O-E)^2/E (O-E)^2/V #> condition=WT    50       47     31.2      7.94      12.9 #> condition=Drug1 50       46     12.5     89.99     128.1 #> condition=Drug2 50       42     91.3     26.60     123.3 #>  #>  Chisq= 186  on 2 degrees of freedom, p= <2e-16  #>  #> $pairwise #>  #>  Pairwise comparisons using Log-Rank test  #>  #> data:  df_isurv and condition  #>  #>       WT      Drug1   #> Drug1 2.3e-14 -       #> Drug2 < 2e-16 < 2e-16 #>  #> P value adjustment method: BH p <- run_bulksurv(dat,                    sample_order = c(\"WT\", \"Drug1\", \"Drug2\"),                    type = \"survival\") #> $median_survival #> Call: survfit(formula = Surv(day, status) ~ condition, data = df_isurv) #>  #>                  n events median 0.95LCL 0.95UCL #> condition=WT    50     47   20.0      19      21 #> condition=Drug1 50     46    4.5       4       6 #> condition=Drug2 50     42   33.0      32      35 #>  #> $logrank #> Call: #> survival::survdiff(formula = Surv(day, status) ~ condition, data = df_isurv) #>  #>                  N Observed Expected (O-E)^2/E (O-E)^2/V #> condition=WT    50       47     31.2      7.94      12.9 #> condition=Drug1 50       46     12.5     89.99     128.1 #> condition=Drug2 50       42     91.3     26.60     123.3 #>  #>  Chisq= 186  on 2 degrees of freedom, p= <2e-16  #>  #> $pairwise #>  #>  Pairwise comparisons using Log-Rank test  #>  #> data:  df_isurv and condition  #>  #>       WT      Drug1   #> Drug1 2.3e-14 -       #> Drug2 < 2e-16 < 2e-16 #>  #> P value adjustment method: BH p +    ggplot2::theme(legend.position = \"bottom\") # Change legend position to be at bottom"},{"path":"https://qhuitan.github.io/ggbulksurv/articles/ggbulksurv.html","id":"only-print-the-plot","dir":"Articles","previous_headings":"run_bulksurv","what":"Only print the plot","title":"Quick Start","text":"default,run_bulksurv prints summary statistics plot. can turn using print_stats print_plot parameters, respectively.","code":"# Turning off summary statistics  p1 <- run_bulksurv(sample_data, sample_order = c(\"WT\", \"Drug1\", \"Drug2\"),               print_stats = FALSE, # don't print stats              print_plot = TRUE # print plot              )"},{"path":"https://qhuitan.github.io/ggbulksurv/articles/ggbulksurv.html","id":"only-print-statistics","dir":"Articles","previous_headings":"run_bulksurv","what":"Only print statistics","title":"Quick Start","text":"","code":"p2 <- run_bulksurv(dat,                     sample_order = c(\"WT\", \"Drug1\", \"Drug2\"),                     print_stats = TRUE,                    print_plot = FALSE # don't print plot              ) #> $median_survival #> Call: survfit(formula = Surv(day, status) ~ condition, data = df_isurv) #>  #>                  n events median 0.95LCL 0.95UCL #> condition=WT    50     47   20.0      19      21 #> condition=Drug1 50     46    4.5       4       6 #> condition=Drug2 50     42   33.0      32      35 #>  #> $logrank #> Call: #> survival::survdiff(formula = Surv(day, status) ~ condition, data = df_isurv) #>  #>                  N Observed Expected (O-E)^2/E (O-E)^2/V #> condition=WT    50       47     31.2      7.94      12.9 #> condition=Drug1 50       46     12.5     89.99     128.1 #> condition=Drug2 50       42     91.3     26.60     123.3 #>  #>  Chisq= 186  on 2 degrees of freedom, p= <2e-16  #>  #> $pairwise #>  #>  Pairwise comparisons using Log-Rank test  #>  #> data:  df_isurv and condition  #>  #>       WT      Drug1   #> Drug1 2.3e-14 -       #> Drug2 < 2e-16 < 2e-16 #>  #> P value adjustment method: BH"},{"path":"https://qhuitan.github.io/ggbulksurv/articles/ggbulksurv.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Quick Start","text":"vignette, explored default run_bulksurv commands. customizations, explore vignettes: Intermediate customizations. Customize colors, axis themes using ‘run_bulksurv()’. Advanced customizations. deep dive behind three functions make run_bulksurv(), well interfacing ‘survminer’ ‘survival’ packages.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/articles/interfacing-with-other-packages.html","id":"behind-the-scenes","dir":"Articles","previous_headings":"","what":"Behind the scenes","title":"Interfacing with other survival packages","text":"run_bulksurv() command makes several choices user, caveat assumptions tend hold conditions. Users desire total control process read section detailed walkthrough. run_bulksurv() wrapper around 3 following functions: get_indiv_surv: Converts bulk survival table individual survival table. fit_surv: Fits survival object survival::survfit(). plot_surv: Plots survival curve using survminer::ggsurvplot(). section takes 3 steps run_bulksurv() wraps around.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/articles/interfacing-with-other-packages.html","id":"get-individual-survivals","dir":"Articles","previous_headings":"","what":"1. Get individual survivals","title":"Interfacing with other survival packages","text":"get_indiv_surv converts table bulk survival data individual survivals. row now represents individual. day represents number days lived, status either 0 (censored) 1 (dead). now tibble one individual per row. point, data can used input packages, survminer() survival.","code":"df_isurv <- get_indiv_surv(sample_data,                            sample_order = c(\"WT\", \"Drug1\", \"Drug2\"))  head(df_isurv) #> # A tibble: 6 × 3 #>   condition   day status #>   <fct>     <int>  <dbl> #> 1 WT            1      0 #> 2 WT            1      1 #> 3 WT            1      1 #> 4 Drug1         1      1 #> 5 Drug1         1      1 #> 6 Drug1         1      1"},{"path":"https://qhuitan.github.io/ggbulksurv/articles/interfacing-with-other-packages.html","id":"fit-the-survival-object","dir":"Articles","previous_headings":"","what":"2. Fit the survival object","title":"Interfacing with other survival packages","text":"fit_surv creates survfit object day status, fits survival curve condition. takes data.frame one individual per row, creates survfit object using survival::survfit() function. Alternatively, can fit manually using survival package: Drug1 shortest median lifespan 4.5 days, 95% confidence interval (95% CI) 4 6 days. contrast, Drug2 longest median lifespan 33 days, 95% CI 32 35 days.","code":"# Fit survival object df_fit <- fit_surv(df_isurv)  head(df_fit) #> Call: survfit(formula = Surv(day, status) ~ condition, data = df_isurv) #>  #>                  n events median 0.95LCL 0.95UCL #> condition=WT    50     47   20.0      19      21 #> condition=Drug1 50     46    4.5       4       6 #> condition=Drug2 50     42   33.0      32      35 df_isurv <- survival::survfit(Surv(day, status) ~ condition,                                 data = df_isurv)"},{"path":[]},{"path":"https://qhuitan.github.io/ggbulksurv/articles/interfacing-with-other-packages.html","id":"using-plot_surv","dir":"Articles","previous_headings":"3. Plot the survival object","what":"Using plot_surv()","title":"Interfacing with other survival packages","text":"plot_surv wrapper around [survminer::ggsurvplot()]. , additional arguments passed plot_surv passed survminer::ggsurvplot(). useful examples illustrated :","code":"df_isurv <- get_indiv_surv(sample_data,                            sample_order = c(\"WT\", \"Drug1\", \"Drug2\"))  plot_surv(fit = df_fit,            type = \"survival\",           data = df_isurv)"},{"path":"https://qhuitan.github.io/ggbulksurv/articles/interfacing-with-other-packages.html","id":"changing-legend-positions","dir":"Articles","previous_headings":"3. Plot the survival object > Using plot_surv()","what":"Changing legend positions","title":"Interfacing with other survival packages","text":"Specifying position (right, left, bottom top) legend.position:  Specific coordinates can also used. bottom left, use legend.position = c(0,0); top right, use legend.position = c(1,1).  doesn’t fit - fact, legend partially obscuring x y axes. can simplify legend removing legend title trailing condition= symbol:","code":"plot_surv(df_fit,            type = \"survival\",            data = df_isurv,           sample_order = c(\"WT\", \"Drug1\", \"Drug2\"),           print_stats = FALSE,           legend.position = \"right\" # Change legend position           ) plot_surv(df_fit,            type = \"survival\",            sample_order = c(\"WT\", \"Drug1\", \"Drug2\"),           print_stats = FALSE,           data = df_isurv,           legend.position = c(0,0) # Specify coordinates           ) sample_order = c(\"WT\", \"Drug1\", \"Drug2\")  plot_surv(df_fit,            type = \"survival\",            sample_order = sample_order,           data = df_isurv,           print_stats = FALSE,           legend.position = c(0.09,0.2), # Specify coordinates           legend.title = \"\", # Remove legend title           legend.labs = sample_order # Remove `condition=`           )"},{"path":"https://qhuitan.github.io/ggbulksurv/articles/interfacing-with-other-packages.html","id":"adding-confidence-intervals-and-median-survival","dir":"Articles","previous_headings":"3. Plot the survival object > Using plot_surv()","what":"Adding confidence intervals and median survival","title":"Interfacing with other survival packages","text":"","code":"plot_surv(df_fit,            data = df_isurv,           type = \"survival\",           add.conf.int = TRUE, # Add 95% confidence interval           legend.position = \"bottom\") plot_surv(df_fit,            data = df_isurv,           type = \"survival\",           add.median.survival = TRUE, # Add median survival line           legend.position = \"bottom\")"},{"path":"https://qhuitan.github.io/ggbulksurv/articles/interfacing-with-other-packages.html","id":"customizing-x-axis-day-breaks","dir":"Articles","previous_headings":"3. Plot the survival object > Using plot_surv()","what":"Customizing x-axis day breaks","title":"Interfacing with other survival packages","text":"","code":"plot_surv(df_fit,            data = df_isurv,           type = \"survival\",           legend.position = \"bottom\",           break.x.by = 5 # Breaks every 5 days           )"},{"path":"https://qhuitan.github.io/ggbulksurv/articles/interfacing-with-other-packages.html","id":"putting-it-all-together","dir":"Articles","previous_headings":"3. Plot the survival object > Using plot_surv()","what":"Putting it all together:","title":"Interfacing with other survival packages","text":"","code":"sample_order = c(\"WT\", \"Drug1\", \"Drug2\")  plot_surv(df_fit,            data = df_isurv,           type = \"survival\",           sample_order = sample_order,           legend.labs = sample_order,            # Rename legend           print_stats = FALSE,                   # don't print stats           palette = c(\"black\", \"red\", \"purple\"), # Custom colors           legend.title = \"\",                     # Remove legend title           legend.position = c(0.9, 0.9),         # Position legend at top right           add.pval = TRUE,                        # Add pvalue           add.median.survival = TRUE             # Add 50% median line              )"},{"path":"https://qhuitan.github.io/ggbulksurv/articles/interfacing-with-other-packages.html","id":"using-survminerggsurvplot","dir":"Articles","previous_headings":"3. Plot the survival object","what":"Using survminer::ggsurvplot()","title":"Interfacing with other survival packages","text":"Alternatively, can construct plots using survminer::ggsurvplot:","code":"survminer::ggsurvplot(fit = df_fit,                       data = df_isurv,                       ncensor.plot = TRUE)"},{"path":[]},{"path":"https://qhuitan.github.io/ggbulksurv/articles/interfacing-with-other-packages.html","id":"using-the-summary_stats-function","dir":"Articles","previous_headings":"4. Print summary statistics","what":"Using the summary_stats function:","title":"Interfacing with other survival packages","text":"Calculates median survival, logrank test pairwise logrank test. returns list object, allows us individually pull values interest. example:","code":"stats <- summary_stats(df_isurv,                         type = \"all\")  stats #> $median_survival #> Call: survfit(formula = Surv(day, status) ~ condition, data = df_isurv) #>  #>                  n events median 0.95LCL 0.95UCL #> condition=WT    50     47   20.0      19      21 #> condition=Drug1 50     46    4.5       4       6 #> condition=Drug2 50     42   33.0      32      35 #>  #> $logrank #> Call: #> survival::survdiff(formula = Surv(day, status) ~ condition, data = df_isurv) #>  #>                  N Observed Expected (O-E)^2/E (O-E)^2/V #> condition=WT    50       47     31.2      7.94      12.9 #> condition=Drug1 50       46     12.5     89.99     128.1 #> condition=Drug2 50       42     91.3     26.60     123.3 #>  #>  Chisq= 186  on 2 degrees of freedom, p= <2e-16  #>  #> $pairwise #>  #>  Pairwise comparisons using Log-Rank test  #>  #> data:  df_isurv and condition  #>  #>       WT      Drug1   #> Drug1 2.3e-14 -       #> Drug2 < 2e-16 < 2e-16 #>  #> P value adjustment method: BH"},{"path":"https://qhuitan.github.io/ggbulksurv/articles/interfacing-with-other-packages.html","id":"the-logrank-test","dir":"Articles","previous_headings":"4. Print summary statistics > Using the summary_stats function:","what":"The logrank test:","title":"Interfacing with other survival packages","text":"","code":"stats$logrank #> Call: #> survival::survdiff(formula = Surv(day, status) ~ condition, data = df_isurv) #>  #>                  N Observed Expected (O-E)^2/E (O-E)^2/V #> condition=WT    50       47     31.2      7.94      12.9 #> condition=Drug1 50       46     12.5     89.99     128.1 #> condition=Drug2 50       42     91.3     26.60     123.3 #>  #>  Chisq= 186  on 2 degrees of freedom, p= <2e-16 # chisq value of logrank test stats$logrank$chisq #> [1] 186.0854 # pvalue of logrank test stats$logrank$pvalue #> [1] 3.909058e-41"},{"path":"https://qhuitan.github.io/ggbulksurv/articles/interfacing-with-other-packages.html","id":"pairwise-log-rank-test","dir":"Articles","previous_headings":"4. Print summary statistics > Using the summary_stats function:","what":"Pairwise log-rank test:","title":"Interfacing with other survival packages","text":"use different p-value adjustment method, specify p_adjust_method follows:","code":"stats$pairwise #>  #>  Pairwise comparisons using Log-Rank test  #>  #> data:  df_isurv and condition  #>  #>       WT      Drug1   #> Drug1 2.3e-14 -       #> Drug2 < 2e-16 < 2e-16 #>  #> P value adjustment method: BH # p-values stats$pairwise$p.value #>                 WT       Drug1 #> Drug1 2.291558e-14          NA #> Drug2 3.367080e-24 3.36708e-24 stats_2 <- summary_stats(df_isurv,                         type = \"all\",                         p_adjust_method = \"bonferroni\")  stats_2 #> $median_survival #> Call: survfit(formula = Surv(day, status) ~ condition, data = df_isurv) #>  #>                  n events median 0.95LCL 0.95UCL #> condition=WT    50     47   20.0      19      21 #> condition=Drug1 50     46    4.5       4       6 #> condition=Drug2 50     42   33.0      32      35 #>  #> $logrank #> Call: #> survival::survdiff(formula = Surv(day, status) ~ condition, data = df_isurv) #>  #>                  N Observed Expected (O-E)^2/E (O-E)^2/V #> condition=WT    50       47     31.2      7.94      12.9 #> condition=Drug1 50       46     12.5     89.99     128.1 #> condition=Drug2 50       42     91.3     26.60     123.3 #>  #>  Chisq= 186  on 2 degrees of freedom, p= <2e-16  #>  #> $pairwise #>  #>  Pairwise comparisons using Log-Rank test  #>  #> data:  df_isurv and condition  #>  #>       WT      Drug1   #> Drug1 6.9e-14 -       #> Drug2 < 2e-16 < 2e-16 #>  #> P value adjustment method: bonferroni"},{"path":"https://qhuitan.github.io/ggbulksurv/articles/interfacing-with-other-packages.html","id":"using-the-survminer-package-directly","dir":"Articles","previous_headings":"4. Print summary statistics","what":"Using the survminer package directly","title":"Interfacing with other survival packages","text":"","code":"test = survminer::pairwise_survdiff(   formula = survival::Surv(day, status) ~ condition, # Fit a survival object   data = df_isurv,   p.adjust.method = \"bonferroni\" # Use bonferroni correction   )  test #>  #>  Pairwise comparisons using Log-Rank test  #>  #> data:  df_isurv and condition  #>  #>       WT      Drug1   #> Drug1 6.9e-14 -       #> Drug2 < 2e-16 < 2e-16 #>  #> P value adjustment method: bonferroni # obtain specific p-values test$p.value #>                 WT       Drug1 #> Drug1 6.874675e-14          NA #> Drug2 5.465280e-24 6.73416e-24"},{"path":"https://qhuitan.github.io/ggbulksurv/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Qian Hui Tan. Author, maintainer.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"TAN Q (2023). ggbulksurv: R package bulk survival analysis. https://qhuitan.github.io/ggbulksurv/.","code":"@Manual{ggbulksurv,   title = {ggbulksurv: An R package for bulk survival analysis},   author = {Qian Hui TAN},   year = {2023},   url = {https://qhuitan.github.io/ggbulksurv/}, }"},{"path":"https://qhuitan.github.io/ggbulksurv/index.html","id":"ggbulksurv","dir":"","previous_headings":"","what":"Survival Analysis for Bulk Samples","title":"Survival Analysis for Bulk Samples","text":"Theggbulksurv package provides functions easily analyze bulk survival data C.elegans D.melanogaster. bulk survival analysis? model organisms (eg C. elegans D. melanogaster), lifespan studies usually performed bulk. bulk survival analysis, researchers place certain number organisms vial, count number organisms dead/censored particular day. produces “one row, multiple individuals” data format, compatible R survival packages (eg survival survminer): … package ? ggbulksurv aims simplify bulk survival analysis creating default pipeline. particular, highlight two features: pivot_prism() : Easily converts lifespan data GraphPad PRISM compatible formats run_bulksurv() : one-stop command plot default survival curves perform statistical analysis. Advanced users can customize functions within ggbulksurv pipeline. ggbulksurv much active development, feedback contribution welcome Issues page. R, get started? complete beginners, see Getting started R vignette complete setup. need package? conducting lifespan studies C.elegans D.melanogaster - probably.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Survival Analysis for Bulk Samples","text":"Install following dependencies CRAN. use tidyverse, already exist: Install two dependencies Bioconductor: can install development version ggbulksurv GitHub :","code":"install.packages(c(\"dplyr\", \"ggplot2\", \"janitor\", \"magrittr\", \"methods\", \"scales\", \"tidyr\")) if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\") BiocManager::install(c(\"survival\", \"survminer\")) if (!require(\"devtools\", quietly = TRUE))     install.packages(\"devtools\") devtools::install_github(\"qhuitan/ggbulksurv\")"},{"path":[]},{"path":"https://qhuitan.github.io/ggbulksurv/index.html","id":"id_1-read-in-your-data-with-readcsv","dir":"","previous_headings":"Getting started (quick)","what":"1. Read in your data with read.csv().","title":"Survival Analysis for Bulk Samples","text":"data file csv 4 columns: condition, day, dead, censored. Additional columns removed analysis. Read .csv file following line code: purposes tutorial, ’ve created ficitonal sample dataset, sample_data, use illustrate functions package.","code":"library(ggbulksurv) library(survival) library(survminer) #> Loading required package: ggplot2 #> Loading required package: ggpubr #>  #> Attaching package: 'survminer' #> The following object is masked from 'package:survival': #>  #>     myeloma dat <- read.csv(\"your-csv-file.csv\") data(sample_data) dat <- sample_data # load sample data  head(dat) #>   condition day dead censored #> 1        WT   0    0        0 #> 2        WT   1    2        1 #> 3        WT   2    1        0 #> 4        WT   3    1        0 #> 5        WT   4    3        0 #> 6        WT   5    1        0"},{"path":"https://qhuitan.github.io/ggbulksurv/index.html","id":"id_2-run-the-survival-analysis","dir":"","previous_headings":"Getting started (quick)","what":"2. Run the survival analysis:","title":"Survival Analysis for Bulk Samples","text":"ggbulksurv can run default settings using run_bulksurv() command. Plotting survival curve:  Plotting mortality curve:","code":"# Plot a survival curve p <- run_bulksurv(dat,                    sample_order = c(\"WT\", \"Drug1\", \"Drug2\"),                    type = \"survival\") #> $median_survival #> Call: survfit(formula = Surv(day, status) ~ condition, data = df_isurv) #>  #>                  n events median 0.95LCL 0.95UCL #> condition=WT    50     47   20.0      19      21 #> condition=Drug1 50     46    4.5       4       6 #> condition=Drug2 50     42   33.0      32      35 #>  #> $logrank #> Call: #> survival::survdiff(formula = Surv(day, status) ~ condition, data = df_isurv) #>  #>                  N Observed Expected (O-E)^2/E (O-E)^2/V #> condition=WT    50       47     31.2      7.94      12.9 #> condition=Drug1 50       46     12.5     89.99     128.1 #> condition=Drug2 50       42     91.3     26.60     123.3 #>  #>  Chisq= 186  on 2 degrees of freedom, p= <2e-16  #>  #> $pairwise #>  #>  Pairwise comparisons using Log-Rank test  #>  #> data:  df_isurv and condition  #>  #>       WT      Drug1   #> Drug1 2.3e-14 -       #> Drug2 < 2e-16 < 2e-16 #>  #> P value adjustment method: BH # Plot a mortality curve p <- run_bulksurv(dat,                    sample_order = c(\"WT\", \"Drug1\", \"Drug2\"),                    type = \"mortality\",                   print_stats = FALSE # don't print stats                   )"},{"path":[]},{"path":"https://qhuitan.github.io/ggbulksurv/index.html","id":"changing-the-p-adjust-method","dir":"","previous_headings":"Further customizations","what":"Changing the p-adjust method","title":"Survival Analysis for Bulk Samples","text":"needed, can change p.adjust method. run_bulksurv() accepts following corrections: “holm”, “hochberg”, “hommel”, “bonferroni”, “BH”, “”, “fdr”, “none”. Default: “BH”","code":"p <- run_bulksurv(dat,                    sample_order = c(\"WT\", \"Drug1\", \"Drug2\"),                    type = \"survival\",                   p_adjust_method = \"bonferroni\" # use bonferroni correction                   ) #> $median_survival #> Call: survfit(formula = Surv(day, status) ~ condition, data = df_isurv) #>  #>                  n events median 0.95LCL 0.95UCL #> condition=WT    50     47   20.0      19      21 #> condition=Drug1 50     46    4.5       4       6 #> condition=Drug2 50     42   33.0      32      35 #>  #> $logrank #> Call: #> survival::survdiff(formula = Surv(day, status) ~ condition, data = df_isurv) #>  #>                  N Observed Expected (O-E)^2/E (O-E)^2/V #> condition=WT    50       47     31.2      7.94      12.9 #> condition=Drug1 50       46     12.5     89.99     128.1 #> condition=Drug2 50       42     91.3     26.60     123.3 #>  #>  Chisq= 186  on 2 degrees of freedom, p= <2e-16  #>  #> $pairwise #>  #>  Pairwise comparisons using Log-Rank test  #>  #> data:  df_isurv and condition  #>  #>       WT      Drug1   #> Drug1 6.9e-14 -       #> Drug2 < 2e-16 < 2e-16 #>  #> P value adjustment method: bonferroni"},{"path":"https://qhuitan.github.io/ggbulksurv/index.html","id":"changing-colors","dir":"","previous_headings":"Further customizations","what":"Changing colors","title":"Survival Analysis for Bulk Samples","text":"","code":"p <- run_bulksurv(dat,                    sample_order = c(\"WT\", \"Drug1\", \"Drug2\"),                   print_stats = FALSE,                   # don't print stats                   palette = c(\"black\", \"red\", \"purple\"), # Custom colors                   legend.title = \"\",                     # Remove legend title                   legend.position = c(0.9, 0.9),         # Position legend at top right                   add.pval = TRUE                        # Add pvalue              )"},{"path":"https://qhuitan.github.io/ggbulksurv/index.html","id":"subsetting-data","dir":"","previous_headings":"","what":"Subsetting data","title":"Survival Analysis for Bulk Samples","text":"’re interested two conditions (eg WT vs Drug1)?","code":"# Plot p_filt <- run_bulksurv(dat,                    sample_order = c(\"WT\", \"Drug1\"), # specify conditions of interest                   print_stats = FALSE # don't print stats                   )"},{"path":"https://qhuitan.github.io/ggbulksurv/index.html","id":"interfacing-with-prism","dir":"","previous_headings":"","what":"Interfacing with PRISM","title":"Survival Analysis for Bulk Samples","text":"allow bulk survival data quickly converted PRISM-compatible format, use pivot_prism function:","code":"head(dat) #>   condition day dead censored #> 1        WT   0    0        0 #> 2        WT   1    2        1 #> 3        WT   2    1        0 #> 4        WT   3    1        0 #> 5        WT   4    3        0 #> 6        WT   5    1        0 df_prism <- pivot_prism(dat)  head(df_prism) # A quick look #> # A tibble: 6 × 4 #>   day   Drug1    WT Drug2 #>   <chr> <dbl> <dbl> <dbl> #> 1 1         1     1    NA #> 2 1         1     1    NA #> 3 1         1     0    NA #> 4 1         1    NA    NA #> 5 1         1    NA    NA #> 6 2         1     1    NA # Export to csv write.csv(df_prism, file = \"lifespan_prism.csv\") sessionInfo() #> R version 4.2.2 (2022-10-31) #> Platform: aarch64-apple-darwin20 (64-bit) #> Running under: macOS Ventura 13.1 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRblas.0.dylib #> LAPACK: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRlapack.dylib #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] survminer_0.4.9  ggpubr_0.6.0     ggplot2_3.4.2    survival_3.5-5   #> [5] ggbulksurv_0.1.0 #>  #> loaded via a namespace (and not attached): #>  [1] zoo_1.8-11        tidyselect_1.2.0  xfun_0.37         janitor_2.2.0     #>  [5] purrr_1.0.1       splines_4.2.2     lattice_0.20-45   carData_3.0-5     #>  [9] snakecase_0.11.0  colorspace_2.1-0  vctrs_0.6.3       generics_0.1.3    #> [13] htmltools_0.5.4   yaml_2.3.7        utf8_1.2.3        survMisc_0.5.6    #> [17] rlang_1.1.1       pillar_1.9.0      withr_2.5.0       glue_1.6.2        #> [21] lifecycle_1.0.3   plyr_1.8.8        stringr_1.5.0     munsell_0.5.0     #> [25] ggsignif_0.6.4    gtable_0.3.3      evaluate_0.20     labeling_0.4.2    #> [29] knitr_1.42        fastmap_1.1.1     fansi_1.0.4       highr_0.10        #> [33] broom_1.0.3       Rcpp_1.0.11       xtable_1.8-4      scales_1.2.1      #> [37] backports_1.4.1   abind_1.4-5       farver_2.1.1      km.ci_0.5-6       #> [41] gridExtra_2.3     digest_0.6.33     stringi_1.7.12    rstatix_0.7.2     #> [45] dplyr_1.1.3       KMsurv_0.1-5      grid_4.2.2        cli_3.6.1         #> [49] tools_4.2.2       magrittr_2.0.3    tibble_3.2.1      tidyr_1.3.0       #> [53] car_3.1-1         pkgconfig_2.0.3   Matrix_1.5-4.1    data.table_1.14.8 #> [57] timechange_0.2.0  lubridate_1.9.1   rmarkdown_2.20    rstudioapi_0.14   #> [61] R6_2.5.1          compiler_4.2.2"},{"path":"https://qhuitan.github.io/ggbulksurv/reference/fit_surv.html","id":null,"dir":"Reference","previous_headings":"","what":"fit_surv — fit_surv","title":"fit_surv — fit_surv","text":"Creates survfit object day status, fits survival curve condition.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/fit_surv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fit_surv — fit_surv","text":"","code":"fit_surv(df_isurv, as_data_frame = FALSE)"},{"path":"https://qhuitan.github.io/ggbulksurv/reference/fit_surv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fit_surv — fit_surv","text":"df_isurv data.frame object survival data one individual per row. Column names must condition, day, status. starting bulk survival data (multiple observations per row), run get_indiv_surv() first. as_data_frame FALSE, returns survfit object survival package. TRUE, returns data.frame format. Default: FALSE","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/fit_surv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fit_surv — fit_surv","text":"survival::survfit() object. as_data_frame = TRUE, returns data.frame format. Default: FALSE","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/fit_surv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"fit_surv — fit_surv","text":"Call: survival::survfit(Surv(day, status) ~ condition, data = df_isurv)}","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/fit_surv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fit_surv — fit_surv","text":"","code":"# Convert bulk survival to individual survival df_isurv <- get_indiv_surv(sample_data, sample_order = c(\"WT\", \"Drug1\", \"Drug2\"))  # Fit survival object surv_fit <- fit_surv(df_isurv)"},{"path":"https://qhuitan.github.io/ggbulksurv/reference/get_indiv_surv.html","id":null,"dir":"Reference","previous_headings":"","what":"get_indiv_surv — get_indiv_surv","title":"get_indiv_surv — get_indiv_surv","text":"Converts bulk survival data (multiple observations per row) individual survival data (one observation per row)","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/get_indiv_surv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_indiv_surv — get_indiv_surv","text":"","code":"get_indiv_surv(sample_data, sample_order = unique(sample_data$condition))"},{"path":"https://qhuitan.github.io/ggbulksurv/reference/get_indiv_surv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_indiv_surv — get_indiv_surv","text":"sample_data data.frame object 4 columns. Column headers must (\"condition\", \"day\", \"dead\", \"censored\"). sample_order character, conditions plot, order. Default: unique(sample_data$condition). subset, use sample_order = c(\"WT\", \"Drug1\")","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/get_indiv_surv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_indiv_surv — get_indiv_surv","text":"tibble lifespan individual. Contains 3 columns: condition, day, status.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/get_indiv_surv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"get_indiv_surv — get_indiv_surv","text":"Status: 1 = dead, 0 = censored.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/get_indiv_surv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_indiv_surv — get_indiv_surv","text":"","code":"# Default (alphabetical order) df_isurv <- get_indiv_surv(sample_data)  # Plot samples in a fixed order df_isurv <- get_indiv_surv(sample_data,                            sample_order = c(\"WT\", \"Drug1\", \"Drug2\"))  # Subset only 2 conditions df_isurv <- get_indiv_surv(sample_data,                            sample_order = c(\"WT\", \"Drug1\"))"},{"path":"https://qhuitan.github.io/ggbulksurv/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://qhuitan.github.io/ggbulksurv/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/pivot_day.html","id":null,"dir":"Reference","previous_headings":"","what":"pivot_day — pivot_day","title":"pivot_day — pivot_day","text":"Converts \"one day, multiple observations\" dataframe PRISM-compatible format. However, function filter days - input must day.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/pivot_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pivot_day — pivot_day","text":"","code":"pivot_day(df)"},{"path":"https://qhuitan.github.io/ggbulksurv/reference/pivot_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pivot_day — pivot_day","text":"df data.frame 4 columns: day | condition | dead | censored. vial column optional.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/pivot_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pivot_day — pivot_day","text":"data.frame PRISM-compatible format. First column day, subsequent columns conditions. column series 1(dead) 0 (censored) corresponding number dead censored per day.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/pivot_prism.html","id":null,"dir":"Reference","previous_headings":"","what":"pivot_prism — pivot_prism","title":"pivot_prism — pivot_prism","text":"Converts bulk survival data (multiple observations per row) individual survival data (one observation per row). Transforms GraphPad PRISM compatible format, one condition per column. Empty values filled NA.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/pivot_prism.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pivot_prism — pivot_prism","text":"","code":"pivot_prism(df)"},{"path":"https://qhuitan.github.io/ggbulksurv/reference/pivot_prism.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pivot_prism — pivot_prism","text":"df data.frame object 4 columns. Column headers must (\"condition\", \"day\", \"dead\", \"censored\").","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/pivot_prism.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"pivot_prism — pivot_prism","text":"Status: 1 = dead, 0 = censored.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/pivot_prism.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"pivot_prism — pivot_prism","text":"","code":"df_prism <- pivot_prism(sample_data)"},{"path":"https://qhuitan.github.io/ggbulksurv/reference/plot_surv.html","id":null,"dir":"Reference","previous_headings":"","what":"plot_surv — plot_surv","title":"plot_surv — plot_surv","text":"Plots survival curve survfit object.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/plot_surv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot_surv — plot_surv","text":"","code":"plot_surv(   fit,   type,   legend.title = \"Condition\",   legend.position = \"right\",   xlab = \"Day\",   add.median.survival = FALSE,   add.conf.int = FALSE,   add.pval = FALSE,   p_adjust_method = \"BH\",   ... )"},{"path":"https://qhuitan.github.io/ggbulksurv/reference/plot_surv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot_surv — plot_surv","text":"fit survfit object, created fit_surv() type character, either \"survival\" (survival curve) \"mortality\" (mortality curve) legend.title character, legend title. title, use legend.title = \"\". Default: \"Condition\" legend.position character, one type \"right\", \"left\", \"bottom\", \"top\". -plot legends, can coordinates. c(0,0): bottom left, c(1,1): top right. xlab character, x-axis label. Default: \"Day\" add.median.survival logical, whether add median survival line. Default: FALSE add.conf.int logical, whether add confidence intervals. Default: FALSE add.pval logical, whether add p-value. Default: FALSE p_adjust_method character, either \"holm\", \"hochberg\", \"hommel\", \"bonferroni\", \"BH\", \"\", \"fdr\", \"none\". Default: \"BH\". details, see ?stats::p.adjust. ... additional arguments passed survminer::ggsurvplot(). See full list arguments survminer::ggsurvplot().","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/plot_surv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot_surv — plot_surv","text":"ggplot2 object plotted survminer package","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/plot_surv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot_surv — plot_surv","text":"","code":"# Convert bulk survival to individual survival df_isurv <- get_indiv_surv(sample_data,                            sample_order = c(\"WT\", \"Drug1\", \"Drug2\"))  # Fit survival object surv_fit <- fit_surv(df_isurv)  # Plot survival curve plot_surv(fit = surv_fit, type = \"survival\") #> Error in eval(fit$call$data): object 'df_isurv' not found"},{"path":"https://qhuitan.github.io/ggbulksurv/reference/run_bulksurv.html","id":null,"dir":"Reference","previous_headings":"","what":"run_bulksurv — run_bulksurv","title":"run_bulksurv — run_bulksurv","text":"function performs default survival analysis running steps: Calculate individual survival: get_indiv_surv() Fit survival curve condition: fit_surv() Plot survival curve: plot_surv()","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/run_bulksurv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"run_bulksurv — run_bulksurv","text":"","code":"run_bulksurv(   sample_data,   sample_order = unique(sample_data$condition),   type = \"survival\",   print_stats = TRUE,   print_plot = TRUE,   returnData = FALSE,   add.conf.int = FALSE,   add.pval = FALSE,   add.median.survival = FALSE,   p_adjust_method = \"BH\",   ... )"},{"path":"https://qhuitan.github.io/ggbulksurv/reference/run_bulksurv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"run_bulksurv — run_bulksurv","text":"sample_data data.frame, bulk survival data sample_order character vector conditions. Eg: c(\"WT\", \"Drug1\", \"Drug2\") type character, either \"survival\" (survival curve) \"mortality\" (mortality curve) print_stats logical, whether print median survival, log-rank test pairwise log-rank test p-value corrections. Default: TRUE print_plot logical, whether print plot. Also returns plot ggplot object modification. Default: TRUE returnData logical, whether return plot statistics list? Default: FALSE add.conf.int logical, whether add 95% confidence intervals. Default: FALSE add.pval logical, whether add log-rank test adjusted p-value. Default: FALSE add.median.survival logicla, whether add median survival line. Default: FALSE p_adjust_method either \"holm\", \"hochberg\", \"hommel\", \"bonferroni\", \"BH\", \"\", \"fdr\", \"none\". Default: \"BH\". details, see ?stats::p.adjust. ... additional plot parameters passed survminer::ggsurvplot. useful parameters: add.conf.int = TRUE, add.pval = TRUE, add.median.survival = TRUE.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/run_bulksurv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"run_bulksurv — run_bulksurv","text":"ggplot2 object survival curve","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/run_bulksurv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"run_bulksurv — run_bulksurv","text":"","code":"# Default p <- run_bulksurv(sample_data) #> $median_survival #> Call: survfit(formula = Surv(day, status) ~ condition, data = df_isurv) #>  #>                  n events median 0.95LCL 0.95UCL #> condition=WT    50     47   20.0      19      21 #> condition=Drug1 50     46    4.5       4       6 #> condition=Drug2 50     42   33.0      32      35 #>  #> $logrank #> Call: #> survival::survdiff(formula = Surv(day, status) ~ condition, data = df_isurv) #>  #>                  N Observed Expected (O-E)^2/E (O-E)^2/V #> condition=WT    50       47     31.2      7.94      12.9 #> condition=Drug1 50       46     12.5     89.99     128.1 #> condition=Drug2 50       42     91.3     26.60     123.3 #>  #>  Chisq= 186  on 2 degrees of freedom, p= <2e-16  #>  #> $pairwise #>  #> \tPairwise comparisons using Log-Rank test  #>  #> data:  df_isurv and condition  #>  #>       WT      Drug1   #> Drug1 2.3e-14 -       #> Drug2 < 2e-16 < 2e-16 #>  #> P value adjustment method: BH  #>     # Customized plot p <- run_bulksurv(sample_data,                  sample_order = c(\"WT\", \"Drug1\", \"Drug2\"),                  print_stats = FALSE,                   # Don't print stats                  add.pval = TRUE,                        # Add pvalue                  add.median.survival = TRUE,                # Add median survival                  palette = c(\"black\", \"red\", \"purple\"), # Custom colors                  legend.title = \"\",                     # Remove legend title                  legend.position = c(0.9, 0.9),         # Position legend at top right                  break.x.by = 5                         # x-axis breaks at 5-day intervals                  )"},{"path":"https://qhuitan.github.io/ggbulksurv/reference/sample_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Survival Analysis Dataset — sample_data","title":"Sample Survival Analysis Dataset — sample_data","text":"fictional dataset survival analysis.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/sample_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Survival Analysis Dataset — sample_data","text":"","code":"data(\"sample_data\")"},{"path":"https://qhuitan.github.io/ggbulksurv/reference/sample_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Survival Analysis Dataset — sample_data","text":"`data.frame` 64 rows 4 columns: condition character, either WT, Drug1 Drug2 day numeric, day observations made dead numeric, number organisms dead day censored numeric, number organisms censored/missing day.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/sample_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Survival Analysis Dataset — sample_data","text":"","code":"data(sample_data)"},{"path":"https://qhuitan.github.io/ggbulksurv/reference/sum_vials.html","id":null,"dir":"Reference","previous_headings":"","what":"sum_vials — sum_vials","title":"sum_vials — sum_vials","text":"Sums total dead censored across vials (day, condition) pair","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/sum_vials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sum_vials — sum_vials","text":"","code":"sum_vials(df)"},{"path":"https://qhuitan.github.io/ggbulksurv/reference/sum_vials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sum_vials — sum_vials","text":"df data.frame 4 columns: day | condition | dead | censored. vial column optional.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/sum_vials.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sum_vials — sum_vials","text":"data.frame. dead censored values summed across vials (day, condition) pair.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/sum_vials.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sum_vials — sum_vials","text":"","code":"df <- tibble::tribble(   ~day, ~condition, ~dead, ~censored, ~ vial,   10,   \"WT\",       1,     0,         1,   10,   \"WT\",       2,     0,         2,   10,   \"Drug1\",    1,     0,         1,   10,   \"Drug1\",    2,     0,         2,   10,   \"Drug2\",    5,     0,         1,   10,   \"Drug1\",    5,     0,         2,   12,   \"WT\",       5,     0,         1,   12,   \"WT\",       1,     0,         2,   )"},{"path":"https://qhuitan.github.io/ggbulksurv/reference/summary_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"summary_stats — summary_stats","title":"summary_stats — summary_stats","text":"function provides following summary statistics: median_survival: Median survival 95% confidence intervals logrank: Log-rank test - difference two () survival curves? pairwise: Pairwise log-rank test p-value correction conditions. Default correction: \"BH\".","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/summary_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"summary_stats — summary_stats","text":"","code":"summary_stats(df_isurv, type = \"all\", p_adjust_method = \"BH\")"},{"path":"https://qhuitan.github.io/ggbulksurv/reference/summary_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"summary_stats — summary_stats","text":"df_isurv data.frame survival data, one individual per row. starting bulk survival data (multiple observations per row), run get_indiv_surv() first. type character, either \"median_survival\", \"logrank\", \"pairwise\" \"\". Default: \"\" p_adjust_method character, either \"holm\", \"hochberg\", \"hommel\", \"bonferroni\", \"BH\", \"\", \"fdr\", \"none\". details, see ?stats::p.adjust.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/summary_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"summary_stats — summary_stats","text":"type == \"\": list object containing results statistical tests. Otherwise, returns ggplot object containing survival/mortality curve","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/summary_stats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"summary_stats — summary_stats","text":"logrank: Calls survival::survdiff() test difference two survival curves using G^rho family tests pairwise: Calls survminer::pairwise_survdiff(), calculates pairwise comparisons groups corrections multiple testing.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/reference/summary_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"summary_stats — summary_stats","text":"","code":"df_isurv <- get_indiv_surv(sample_data,                            sample_order = c(\"WT\", \"Drug1\", \"Drug2\"))  stats <- summary_stats(df_isurv) stats #> $median_survival #> Call: survfit(formula = Surv(day, status) ~ condition, data = df_isurv) #>  #>                  n events median 0.95LCL 0.95UCL #> condition=WT    50     47   20.0      19      21 #> condition=Drug1 50     46    4.5       4       6 #> condition=Drug2 50     42   33.0      32      35 #>  #> $logrank #> Call: #> survival::survdiff(formula = Surv(day, status) ~ condition, data = df_isurv) #>  #>                  N Observed Expected (O-E)^2/E (O-E)^2/V #> condition=WT    50       47     31.2      7.94      12.9 #> condition=Drug1 50       46     12.5     89.99     128.1 #> condition=Drug2 50       42     91.3     26.60     123.3 #>  #>  Chisq= 186  on 2 degrees of freedom, p= <2e-16  #>  #> $pairwise #>  #> \tPairwise comparisons using Log-Rank test  #>  #> data:  df_isurv and condition  #>  #>       WT      Drug1   #> Drug1 2.3e-14 -       #> Drug2 < 2e-16 < 2e-16 #>  #> P value adjustment method: BH  #>"},{"path":[]},{"path":"https://qhuitan.github.io/ggbulksurv/news/index.html","id":"bug-fixes-0-2-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggbulksurv 0.2.1","text":"Fixed bug run_bulksurv() - returnData now returns data list","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/news/index.html","id":"enhancements-0-2-1","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"ggbulksurv 0.2.1","text":"returnData = TRUE run_bulksurv() returns pivoted data list item","code":""},{"path":[]},{"path":"https://qhuitan.github.io/ggbulksurv/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggbulksurv 0.2.0","text":"Fixed bug pivot_prism() erroneously expanded first column","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/news/index.html","id":"enhancements-0-2-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"ggbulksurv 0.2.0","text":"run_bulksurv() now supports subsetting via sample_order parameter. run_bulksurv(df) now runs default analysis conditions. Survival plots now start (0,0)","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/news/index.html","id":"whats-new-0-2-0","dir":"Changelog","previous_headings":"","what":"What’s new","title":"ggbulksurv 0.2.0","text":"Added “Getting started R” vignette beginner R users","code":""},{"path":[]},{"path":"https://qhuitan.github.io/ggbulksurv/news/index.html","id":"enhancements-0-1-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"ggbulksurv 0.1.0","text":"run_bulksurv() print_plot parameter allows plots turned . p_adjust_method can now customized run_bulksurv() summary_stats().","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"ggbulksurv 0.1.0","text":"s * Deployed website GitHub pages. * New pivot_prism() function transform bulk survival data GraphPad PRISM compatible format * Split README file three vignette articles easier navigation.","code":""},{"path":"https://qhuitan.github.io/ggbulksurv/news/index.html","id":"ggbulksurv-0009000","dir":"Changelog","previous_headings":"","what":"ggbulksurv 0.0.0.9000","title":"ggbulksurv 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
